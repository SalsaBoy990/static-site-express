[{"objectID":"2018-06-22","url":"https://static-site-express.netlify.app/2018/06/22/welcome_to_static_site_express","lang":"en","title":"Welcome to static-site-express. Install guide","description":"static-site-express is a simple Node.js based static site generator that uses EJS and Markdown. Installation and usage guide.","image":"https://static-site-express.netlify.app/assets/images/uploads/node.jpg","authors":["András Gulácsi"],"datePublished":"2018-06-22","category":"","content":"<figure><a href=\"https://app.netlify.com/sites/static-site-express/deploys\"><img src=\"https://api.netlify.com/api/v1/badges/bb6cf5c7-4ccc-4684-8a82-30e64ac00baa/deploy-status\" alt=\"\"></a><figcaption>Netlify Status</figcaption></figure>\n<p>static-site-express is a simple Node.js based static-site generator that uses EJS and Markdown. Deploy your static site to Netlify or any platform to your liking. Suited for landing pages, portfolio, blogs, documentation, hobby projects.</p>\n<h2>Getting started</h2>\n<h3>Install static-site-express</h3>\n<ol>\n<li>Fork and clone this repository to get a starter template that uses Flowbite, an open-sorce UI library of components created with TailwindCSS. Use the <code>master</code> branch.</li>\n</ol>\n<pre><code class=\"language-raw\">git clone https://github.com/SalsaBoy990/static-site-express project\n</code></pre>\n<ol start=\"2\">\n<li>To have a basic e-commerce website Flowbite/TailWind starter incorporating the <a href=\"https://snipcart.com/\">Snipcart</a> ecommerce platform into static-site-express:</li>\n</ol>\n<ul>\n<li>Checkout branch <code>snipcart</code></li>\n<li>Register at <a href=\"https://snipcart.com/\">Snipcart</a></li>\n<li>Copy your Snipcart public test key at <code>src/layouts/partials/scripts.ejs</code> to the <code>publicApiKey</code> property value on line 6:</li>\n</ul>\n<pre><code class=\"language-html\">&lt;div id=&quot;snipcart&quot; data-config-modal-style=&quot;side&quot; data-api-key=&quot;YOUR_PUBLIC_TEST_API_KEY&quot; hidden&gt;&lt;/div&gt;\n</code></pre>\n<p><em>Note:</em> Only hardcode the test api key for development, not for production! And never commit it to version control, otherwise you need to invalidate the previous keys and create new ones. This for testing locally. For production, paste your key in as env variable.</p>\n<p><a href=\"https://snipcart.com/\">Snipcart</a> is more than a simple cart: enjoy a full back-office management dashboard to track abandoned carts, sales, orders, customers and more.</p>\n<ul>\n<li>It supports card payments via PayPay, Stripe, and other payment gateways,</li>\n<li>It generates invoices and sends them to customers after purchase,</li>\n<li>etc.</li>\n</ul>\n<p><em>Note:</em> Netlify will build your site from the default branch (usually the <code>master</code>) by default.\nYou can use a different branch other than the default one, but in that case Netlify CMS will not work properly. For example, the images uploaded through the CMS will be pushed into the default branch, not the other you set up in Netlify!)</p>\n<p><em>Test website:</em> Use the 'Deploy to Netlify' button at the <a href=\"https://static-site-express.netlify.com/\">project's website</a> to have a test website.</p>\n<h3>Build your site locally</h3>\n<p>Use npm scripts defined in package.json</p>\n<ol>\n<li>Build the site generator into the <code>app</code> folder. The <code>site-generator</code> folder contains the site builder's source code, and that is the code that you have to modify if you want make changes, not the compiled version in <code>app</code> folder. The code uses <a href=\"https://flow.org/\">flow</a> static type checker annotations. To compile the app code with the Babel transpiler, run:</li>\n</ol>\n<pre><code class=\"language-raw\">bin/generate\n</code></pre>\n<ol start=\"2\">\n<li>Build site from <code>./content</code> into the <code>./public</code> folder (in watch mode):</li>\n</ol>\n<pre><code class=\"language-raw\">bin/watch\n</code></pre>\n<p>This bash script will call: <code>npm run watch-chokidar</code>.\nAlternatively, you can also use <code>npm run watch-nodemon</code>.</p>\n<p><em>Issue 1: if you don't see the website updated after file changes, you have to restart the script. Sometimes it happens. TODO</em>\nThe build process is intentionally delayed with setTimeout, to have enough time the css to be compiled after changes. Unfortunately, there is an interaction with the css builder script (which is slower). With the delay, crashes are less frequent</p>\n<ol start=\"3\">\n<li>Serve website on <code>localhost:4000</code>:</li>\n</ol>\n<pre><code class=\"language-raw\">bin/serve\n</code></pre>\n<p><em>Issue 2: very rarerly, the Express dev server also crashes if the build script fails. TODO</em></p>\n<ol start=\"4\">\n<li>Create the css bundle with PostCSS (in watch mode):</li>\n</ol>\n<pre><code class=\"language-raw\">bin/css\n</code></pre>\n<ol start=\"5\">\n<li>Create the js bundle with Webpack (in watch mode):</li>\n</ol>\n<pre><code class=\"language-raw\">bin/js\n</code></pre>\n<p>Check out the <code>bin</code> folder and the <code>package.json</code> file to know more about the available scripts.</p>\n<h3>Modify the site generator's source code</h3>\n<p>Never change the code in <code>app</code> folder since the builder app's code will be generated into this folder automatically!</p>\n<p>The JavaScript source is in the <code>site-generator/</code> folder. These files also contain the flow type annotations.</p>\n<p><strong>Generally, you only need to modify the <code>core/generator.js</code> and the <code>core/methods.js</code> files.</strong></p>\n<ul>\n<li>\n<p><code>methods.js</code> contains most of the methods for the generator.</p>\n</li>\n<li>\n<p>In <code>generator.js</code>, you can modify the pages you want to generate in the switch statements starting from <strong>line 209</strong>. You also need to create a page (<code>.ejs</code>) in the <code>pages/</code> folder, and a template (in <code>layouts/</code>) to be used for that page (or use one of the pre-existing templates like <code>default.ejs</code>).</p>\n</li>\n<li>\n<p>Post properties can be extended <strong>starting at line 136</strong>, in the <code>templateConfig</code> object literal (<code>generator.js</code>)</p>\n</li>\n</ul>\n<p>After making changes, <strong>the source must be transpiled</strong> by Babel into ES5 into the <code>app/</code> folder with:</p>\n<ul>\n<li><code>bin/generate</code> or <code>npm run generator</code></li>\n</ul>\n<p>At the end of the process, restart build/watch scripts. This process in sub-optimal, but currently this is the workflow.</p>\n<h3>Website content (in the <code>website/</code> folder)</h3>\n<ul>\n<li>Post data comes from markdown files (in <code>posts/</code>) where the front matter block contains the post properties (you can change them, but do not forget to update the <code>templateConfig</code> object literal (<code>generator.js</code>) as well).</li>\n<li>Pages (in <code>pages/</code>) are using templates and partials defined in the <code>layouts/</code> folder.</li>\n<li>The <code>config/site.config.js</code> file contains some of the site properties (like site title, author, description, social media links etc.) that are used in the EJS partials. Can also be extended it to your liking.</li>\n</ul>\n<h2>Publish Website to Netlify</h2>\n<h3>Register at Netlify and publish your website</h3>\n<ul>\n<li>\n<p>Register on <a href=\"https://www.netlify.com/\">Netlify</a>, and <a href=\"https://www.netlify.com/docs/continuous-deployment/\">see this tutorial video</a> if you are unfamiliar with the procedure.</p>\n</li>\n<li>\n<p>The <code>netlify.toml</code> configuration file contains important properties:</p>\n</li>\n</ul>\n<pre><code class=\"language-raw\">[build]\n  base    = &quot;/&quot;\n  publish = &quot;public&quot;\n  command = &quot;npm run build&quot;\n</code></pre>\n<p>The base path, the build command, and the publish directory. You can keep those settings unchanged.</p>\n<p>You can also define here some post-processing actions to be run in post-processing stages as part of Netlify's CI/CD pipeline.</p>\n<p>Netlify builds your website with its buildbot. It starts a Docker container running the <a href=\"https://hub.docker.com/r/netlify/build/#!\">Netlify build image</a>\nThe container is basically a writable OverlayFS layer created on top of the numerous read-only OverlayFS layers of the Docker image (files copied on top of each other: each layer is represents a command in the Dockerfile). Which is destroyed after the build has been completed (the data can be made permanent using volumes which are kept).</p>\n<p>The images are based on base images (the FROM statement at the first line of a Dockerfile) that are special distributions that &quot;think they are operating systems&quot;, but are more lightweight that a complete OS.</p>\n<p><a href=\"https://hub.docker.com/_/alpine/\">Alpine Linux</a> if the most lightweight of them (around 5MB). Interesting to note, that <a href=\"https://codeburst.io/docker-from-scratch-2a84552470c8\">images can built from scratch as well</a> (scratch is a reserved image that is empty, and thus does nothing!). The base images are built this way (&quot;FROM scratch&quot;).</p>\n<p>Docker is using the kernel and the resources of the host (obviously), and are for process isolation. Containers are more lightweight, don't have the overheads Virtual Machines have. <a href=\"https://www.simplilearn.com/tutorials/docker-tutorial/docker-vs-virtual-machine\">More about this topic</a>.</p>\n<p>VMs are used for full isolation including resources (for example, to subdivide the server resources for shared hosting: each hosting having a computing power of X CPUs of X type, have X GB of memory and X GB storage space), and have a separate OS installed along with the host OS, so they do not share the kernel.</p>\n<p>For Windows, you need to install Windows Subsystem for Windows 2 (WSL2) to have a distro based on Linux kernel installed. Although, there are container base images available for Windows as well. So, Docker can even use the Windows kernel, and thus a Linux kernel is not necessarly needed to be installed.</p>\n<p>Lots of images are pre-compiled for us (like the <code>netlify/build</code> image) and stored in the DockerHub registry. You don't need to build them from Dockerfile, you just download them from the register.</p>\n<p>If you know the basics of Docker, you can understand some things about Netlify as well.\nCheck these shell scripts out:</p>\n<p>When the Docker fires up, this script runs:\nhttps://github.com/netlify/build-image/blob/focal/run-build.sh</p>\n<p>This is the Dockerfile from which the Netlify image is built (based on <code>ubuntu:20.04</code>):\nhttps://github.com/netlify/build-image/blob/focal/Dockerfile</p>\n<p>In the optional <code>_headers</code> file you can specify the HTTP headers and set Content Security Policy (CSP) rules for the Netlify server. Currently, CSP rules are commented out. You can also specify these in <code>netlify.toml</code>.</p>\n<p>The <code>_redirects</code> file is currently empty. When you have a custom domain, you can make a redirect from <em>.netlify.com</em> to your custom domain.</p>\n<p><code>sitemap.xml</code> is empty by default. static-site-express currently does not come with a feature to generate an XML sitemap.</p>\n<p><code>robots.txt</code> default settings:</p>\n<pre><code class=\"language-raw\"># Disallow admin page\nUser-agent: *\nDisallow: /admin/\n\n# Disallow message-sent page\nUser-agent: *\nDisallow: /message-sent/\n\n# Rule 3\nUser-agent: *\nAllow: /\n</code></pre>\n<p>For <a href=\"https://search.google.com/search-console/about\">Google Search Console</a> verification, you should have an HTML file from Google included in the root of your Netlify publish folder (in our case, <code>public</code>). The build script copies this file from <code>./content</code> to <code>./public</code>. <strong>Change the filename in the array starting at line 78</strong> in <code>./site-generator/core/generator.js</code> and rebuild the source into the <code>lib/</code> folder!</p>\n<h3>Netlify Forms</h3>\n<p>Netlify automatically discovers the contact form via custom attributes added to the form.</p>\n<h3>Netlify CMS</h3>\n<p>Set <code>display_url</code> to your custom domain in <code>content/admin/config.yml</code></p>\n<p><a href=\"https://github.com/netlify/netlify-cms\">Netlify CMS Docs</a></p>\n<h2>Changelog</h2>\n<h3>v2.0.0 (14 August 2022)</h3>\n<p><strong>New:</strong></p>\n<ul>\n<li>This intended to be the last major version release.</li>\n<li>Refactor folder structure <strong>(breaking change)</strong>.</li>\n<li>Asset folder refactoring <strong>(breaking change)</strong>.</li>\n<li>Add config files for Tailwind, PostCSS, and Webpack.</li>\n<li>Webpack will used to bundle JS, and PostCSS to bundle CSS.</li>\n<li>Integrate TailwindCSS, use Flowbite UI component library with flowbite/typography (CSS+JS).</li>\n<li>Add <code>.env.example</code>, remove <code>.env</code>, change .env vars.</li>\n<li>Add post-processing, http header settings to <code>netlify.toml</code> configuration.</li>\n<li>Add Content Security Policy in <code>netlify.toml</code> with whitelisting Netlify-specific domains.</li>\n<li>Add bash scripts with meaningful names to type less to call npm scripts.</li>\n<li>Add new favicon and app logos.</li>\n</ul>\n<p><strong>Update:</strong></p>\n<ul>\n<li>Update package.json version number.</li>\n<li>Update existing, remove not needed, add new npm packages, supported Node version is: <code>v16.14.0</code>.</li>\n<li>Update paths in scripts <strong>(breaking change)</strong>.</li>\n<li>Update comments in the code.</li>\n<li>Set node version for Netlify to <code>v16.14.0</code>.</li>\n<li>Update layouts, pages and posts (to use TailWindCSS).</li>\n<li>Update Netlify CMS settings.</li>\n<li>Update Netlify CMS needs to have the website source files in <code>content/</code> folder.</li>\n<li>Update README.md.</li>\n<li>Update .gitignore.</li>\n</ul>\n<p><strong>Delete:</strong></p>\n<ul>\n<li>Remove Docker configuration: using the site-builder in Docker would only add unnecessary complexity for zero gain.</li>\n<li>Remove GA scripts.</li>\n<li>remove Heroku Procfile.</li>\n</ul>\n<p><strong>New/Update/Delete:</strong></p>\n<ul>\n<li>Define new, rename existing, remove not needed npm scripts.</li>\n</ul>\n<h3>v1.0.2-alpha (28 April 2021)</h3>\n<ul>\n<li>Update README.md.</li>\n<li>Update package version number.</li>\n<li>Set node version for Netlify to avoid package compatibility errors.</li>\n<li>Update Netlify CMS settings, change media folder, input types.</li>\n<li>Netlify CMS needs to have the website source files in src/ folder.</li>\n</ul>\n<h3>v1.0.1-alpha (27 April 2021)</h3>\n<p>Incorrect configuration in docker-compose.yml.</p>\n<ul>\n<li>fix: &quot;generator&quot; and &quot;devserver&quot; services share volume data. &quot;devserver&quot; is dependent on the &quot;generator&quot; service.</li>\n</ul>\n<p>Under testing. I haven't experienced any errors in this version.</p>\n<h3>v1.0.0-alpha (25 April 2021) ! breaking change from previous versions !</h3>\n<ul>\n<li>version re-started with <em>v1.0.0</em> (from <em>4.1.0</em>).</li>\n<li>Update npm dependencies to the newest versions.</li>\n<li>Build script partial code refactoring, code styling.</li>\n</ul>\n<p>Correct EJS syntax error after EJS version update.</p>\n<ul>\n<li>fix: From now on, EJS include directives should be in this format:</li>\n</ul>\n<p><code>&lt;%- include ('partial/element-name') %&gt;</code></p>\n<p>This is a <strong>breaking change</strong>, you should update your <code>partials/templates</code>!</p>\n<p>Update build and watch scripts (using chokidar).</p>\n<ul>\n<li>update: build script content moved into a module (<code>generator.js</code>) to be used in a build and the chokidar-based watch scripts.</li>\n</ul>\n<p>In 2019, chokidar was not watching file changes properly, thus the npm script was named &quot;watch-exp&quot;. The default watch script is using nodemon.</p>\n<p>Add flow types support and re-structure folders.</p>\n<ul>\n<li>new: add Flow, a static type checker for JavaScript.</li>\n<li>update: site generator source moved to <code>src/</code>, Babel will transpile the source into the <code>lib/</code> folder where originally the source were.</li>\n<li>update: website source is moved to <code>website/</code> folder, necessary code changes are applied.</li>\n</ul>\n<p>Refactor site generator, code improvements, config changes.</p>\n<ul>\n<li>update: <code>package.json</code> add dotenv package, update npm scripts.</li>\n<li>update/add: refactor static site generator scripts, changes in methods, add types to code with flow, update/add comments to every method.</li>\n<li>add: lang and month names options to site.config.js.</li>\n</ul>\n<p>Dockerize project</p>\n<ul>\n<li>new: read variables from <code>.env</code> file.</li>\n<li>new: add Dockerfile, docker-compose file, <code>.dockerignore</code>.</li>\n</ul>\n<h2>Useful resources</h2>\n<ul>\n<li><a href=\"https://docs.netlify.com/\">Netlify Docs</a></li>\n<li><a href=\"https://www.netlifycms.org/docs/intro/\">Netlify CMS docs</a></li>\n<li><a href=\"https://www.netlify.com/blog/2016/10/18/how-our-build-bots-build-sites/\">How the Netlify buildbot builds websites</a></li>\n<li><a href=\"https://www.netlify.com/blog/2018/08/14/announcing-netlify-drop-the-simplicity-of-bitballoon-with-the-added-power-of-netlify/\">Netlify Drop - formarly BitBalloon</a></li>\n<li><a href=\"https://www.netlify.com/blog/2019/10/07/complete-intro-to-netlify-in-3.5-hours/\">Complete Intro to Netlify in 3.5 hours</a></li>\n<li><a href=\"https://tailwindcss.com/docs/installation\">TailwindCSS Docs</a></li>\n<li><a href=\"https://flaviocopes.com/tailwind-setup/\">TailwindCSS Setup</a></li>\n<li><a href=\"https://www.sitepoint.com/bundle-static-site-webpack/\">Webpack tutorial</a></li>\n<li><a href=\"https://webpack.js.org/plugins/terser-webpack-plugin/\">Terser Webpack plugin</a></li>\n<li><a href=\"https://flowbite.com/docs/getting-started/introduction/\">Flowbite UI library based on TailwindCSS</a></li>\n</ul>\n<h2>Known issues</h2>\n<h3>Chokidar regurarly crashes on Ubuntu 20.04 LTS (12 August 2022)</h3>\n<p>Bug: Problems with existing assets folder.</p>\n<p>The build script should always delete the folders inside the public folder.\nHowever, the assets folder is sometimes not deleted, so an exception occurs:\n<code>[Error: EEXIST: file already exists, mkdir './public/assets']</code></p>\n<h3>Chokidar working properly on Ubuntu 20.04 (other distros not tested) (28 April 2021)</h3>\n<ul>\n<li>Chokidar now can be safely used on Ubuntu</li>\n</ul>\n<h3>Nodemon was not working properly on Ubuntu (2019)</h3>\n<ul>\n<li><code>nodemon</code> not trigger re-build on Linux on file changes (this behavior was experienced on Ubuntu 18.04 LTS Bionic Beaver)</li>\n<li>On Ubuntu, you can run <code>npm run watch-exp</code> command which uses the <a href=\"https://github.com/paulmillr/chokidar\">chokidar</a> package.</li>\n</ul>\n<p>If you have a problem or a question about static-site-express, <a href=\"https://github.com/SalsaBoy990/static-site-express/issues\">open an issue here</a>.</p>\n<h2>Credits</h2>\n<p>The idea of making a static site generator in Node.js came from this good article by Douglas Matoso (not accessible any more): <a href=\"https://medium.com/douglas-matoso-english/build-static-site-generator-nodejs-8969ebe34b22\">Build a static site generator in 40 lines with Node.js</a>.</p>\n<p>This package uses modified code from <a href=\"https://github.com/doug2k1/nanogen\"><strong>doug2k1/nanogen</strong></a> (mainly from the <code>legacy</code> branch and some ideas from the <code>master</code> branch) <strong>Copyright: MIT (c) 2018 Douglas Matoso.</strong></p>\n<h2>Licence</h2>\n<p>MIT licence - Copyright (c) 2022 András Gulácsi.</p>\n"},{"objectID":"2018-06-25","url":"https://static-site-express.netlify.app/2018/06/25/markdown_cheatsheet","lang":"en","title":"Markdown cheatsheet, markdown-it plugins","description":"I created this post for those who are unfamiliar with the syntax of Markdown. People who are already similar with Markdown should also check this post because I use some special plugins that provide additional features.","image":"https://static-site-express.netlify.app/assets/images/uploads/writing.jpg","authors":["András Gulácsi"],"datePublished":"2018-06-25","category":"","content":"<p>I created this post for those who are unfamiliar with the syntax of Markdown which is a markup language. People who are already familiar with Markdown should also check this post because I use some special plugins for <code>markdown-it</code> that provide additional features.</p>\n<p>For safety reasons, you cannot include HTML code into Markdown. By default, HTML is escaped.</p>\n<h2>Table of Contents</h2>\n<hr>\n<h3>General syntax</h3>\n<ol>\n<li><a href=\"#headings\">Headings</a></li>\n<li><a href=\"#emphasis\">Emphasis</a></li>\n<li><a href=\"#paragraph\">Paragraphs, line breaks</a></li>\n<li><a href=\"#hrule\">Horizontal rule</a></li>\n<li><a href=\"#blockquotes\">Blockquotes</a></li>\n<li><a href=\"#links\">Links</a></li>\n<li><a href=\"#lists\">Lists</a></li>\n</ol>\n<h3>Special syntax</h3>\n<ol>\n<li><a href=\"#add-class\">Add a CSS class and an #id to an element</a></li>\n<li><a href=\"#tables\">Table with caption</a></li>\n<li><a href=\"#images\">Image with caption</a></li>\n<li><a href=\"#highlight\">Code syntax highlighting</a></li>\n</ol>\n<hr>\n<h2>General syntax</h2>\n<h3 id=\"headings\">1. Headings</h3>\n<pre><code># H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n</code></pre>\n<h1>H1</h1>\n<h2>H2</h2>\n<h3>H3</h3>\n<h4>H4</h4>\n<h5>H5</h5>\n<h6>H6</h6>\n<p>Alternatively, for H1 and H2, an underline-ish style:</p>\n<h1>Alt-H1</h1>\n<h2>Alt-H2</h2>\n<h3 id=\"emphasis\">2. Emphasis</h3>\n<pre><code class=\"language-markdown\">Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n</code></pre>\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <s>Scratch this.</s></p>\n<h3 id=\"paragraph\">3. Paragraphs, line breaks</h3>\n<p>My basic recommendation for learning how line breaks work is to experiment and discover -- hit &lt;Enter&gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. &quot;Markdown Toggle&quot; is your friend.</p>\n<p>Here are some things to try out:</p>\n<pre><code class=\"language-markdown\">Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a separate paragraph.\n\nThis line is also begins a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the same paragraph.\n</code></pre>\n<p>Here's a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p>\n<p>This line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the <em>same paragraph</em>.\nHere's a line for us to start with.</p>\n<p>This line is separated from the one above by two newlines, so it will be a separate paragraph.</p>\n<p>This line is also begins a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the same paragraph.</p>\n<h3 id=\"hrule\">4. Horizontal rule</h3>\n<pre><code class=\"language-markdown\">Three or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n</code></pre>\n<p>Three or more...</p>\n<hr>\n<p>Hyphens</p>\n<hr>\n<p>Asterisks</p>\n<hr>\n<p>Underscores</p>\n<h3 id=\"blockquotes\">5. Blockquotes</h3>\n<pre><code class=\"language-markdown\">&gt; Blockquotes are very handy in email to emulate reply text.\n&gt; This line is part of the same quote.\n\nQuote break.\n\n&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n</code></pre>\n<blockquote>\n<p>Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.</p>\n</blockquote>\n<p>Quote break.</p>\n<blockquote>\n<p>This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p>\n</blockquote>\n<h3 id=\"links\">6. Links</h3>\n<p>Some ways to use links:</p>\n<pre><code class=\"language-markdown\">[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com &quot;Google's Homepage&quot;)\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs in angle brackets will automatically get turned into links:  \n&lt;http://www.example.com&gt;.\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre>\n<p><a href=\"http://www.example.com/\">I'm an inline-style link</a></p>\n<p><a href=\"https://www.google.com\" title=\"Google's Homepage\">I'm an inline-style link with title</a></p>\n<p><a href=\"https://www.mozilla.org\">I'm a reference-style link</a></p>\n<p><a href=\"https://www.mozilla.org\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"https://www.mozilla.org\">link text itself</a>.</p>\n<p>URLs in angle brackets will automatically get turned into links:<br>\n<a href=\"http://www.example.com\">http://www.example.com</a>.</p>\n<p>Some text to show that the reference links can follow later.</p>\n<h3 id=\"lists\">7. Lists</h3>\n<p>(In this example, leading and trailing spaces are shown with with dots: ⋅)</p>\n<pre><code class=\"language-markdown\">1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n</code></pre>\n<ol>\n<li>First ordered list item</li>\n<li>Another item</li>\n</ol>\n<ul>\n<li>Unordered sub-list.</li>\n</ul>\n<ol>\n<li>\n<p>Actual numbers don't matter, just that it's a number</p>\n</li>\n<li>\n<p>Ordered sub-list</p>\n</li>\n<li>\n<p>And another item.</p>\n<p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</p>\n<p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>\nNote that this line is separate, but within the same paragraph.<br>\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p>\n</li>\n</ol>\n<ul>\n<li>Unordered list can use asterisks</li>\n</ul>\n<ul>\n<li>Or minuses</li>\n</ul>\n<ul>\n<li>Or pluses</li>\n</ul>\n<h2>Special syntax</h2>\n<h3 id=\"add-class\">1. Add a CSS class and an #id to an element</h3>\n<p>One example add underline to a link (by default, Bootstrap 3 does not use underline for the links - I might change this behaviour though):</p>\n<p><code>[highlight.js](https://highlightjs.org/){.underline}</code></p>\n<p>And the result is: <a href=\"https://highlightjs.org/\" class=\"underline\">highlight.js</a></p>\n<p>It is very important that you should not use whitespace, otherwise it will not work!</p>\n<p>Add an id to an element: <code>Special syntax{id=special}</code>. It converts to <code>&lt;h2 id=&quot;special&quot;&gt;Special syntax&lt;/h2&gt;</code>.</p>\n<h3 id=\"tables\">2. Table with caption</h3>\n<pre><code class=\"language-markdown\">Year | Column 1 | Column 2\n--- | --- | ---\n1993 | 60 | 70\n2007 | 145 | 300\n2010 | 455 | 700\n2018 | 1024 | 576\n[Table 1: Three columns filled with some numbers]\n</code></pre>\n<p>And the result:</p>\n<table>\n<caption id=\"table1threecolumnsfilledwithsomenumbers\">Table 1: Three columns filled with some numbers</caption>\n<thead>\n<tr>\n<th>Year</th>\n<th>Column 1</th>\n<th>Column 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1993</td>\n<td>60</td>\n<td>70</td>\n</tr>\n<tr>\n<td>2007</td>\n<td>145</td>\n<td>300</td>\n</tr>\n<tr>\n<td>2010</td>\n<td>455</td>\n<td>700</td>\n</tr>\n<tr>\n<td>2018</td>\n<td>1024</td>\n<td>576</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"images\">3. Image with caption</h3>\n<p>Syntax: <code>![caption text](link-to-image)</code></p>\n<p>Example:\n<code>![Figure 1. Interest in static site generators over time (Google Trends)](/assets/images/uploads/trend.png)</code></p>\n<figure><img src=\"/assets/images/uploads/trend.png\" alt=\"\"><figcaption>Figure 1. Interest in static site generators over time (Google Trends)</figcaption></figure>\n<h3 id=\"highlight\">4. Code syntax highlighting</h3>\n<p>This SSG uses the <code>highlight.js</code> for syntax highlighting. Everything is automatic, so you only need to write the code snippets like this:</p>\n<p><code> ```` javascript</code></p>\n<p><code>var a = 20</code></p>\n<p><code>function foo (a) {</code></p>\n<p><code>  console.log(a)</code></p>\n<p><code>}</code></p>\n<p><code>foo(a)</code></p>\n<p><code>````</code></p>\n<p>...and the result is:</p>\n<pre><code class=\"language-javascript\">var a = 20\nfunction foo (a) {\n  console.log(a)\n}\nfoo(a)\n</code></pre>\n<p>The prebuilt version of <a href=\"https://highlightjs.org/\" class=\"underline\">highlight.js</a> is included to this site which supports 23 commonly used languages. However, you can add support for 179 languages and 79 styles if you need.</p>\n<h2>Source of the general syntax part</h2>\n<ul>\n<li>Adam Pritchard (2017). <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\" class=\"underline\">Markdown Cheatsheet</a>.</li>\n</ul>\n"},{"objectID":"2018-12-28","url":"https://static-site-express.netlify.app/2018/12/28/customize-your-site-write-your-blog-with-netlify-cms","lang":"en","title":"Customize your site, write your blog with Netlify CMS","description":"Tutorial on how to customize your website, use Netlify Identity, Git Gateway, Netlify Forms, and Netlify Content Management System (CMS) to conveniently write your blog.","image":"https://static-site-express.netlify.app/assets/images/uploads/static.jpg","authors":["András Gulácsi"],"datePublished":"2018-12-28","category":"","content":"<p>This example website is created by using Bootstrap 3 framework with jQuery. In order to understand static-site-express better, I show you the directory structure. When you customize your site, you need to modify the build script a little bit. For example, if you want to add about page, contact page etc. to your site.</p>\n<p>For the installation guide, <a href=\"https://static-site-express.netlify.com/2018/06/22/welcome_to_static_site_express\">see one of my previous posts</a>.</p>\n<h2>Directory Structure of SSE</h2>\n<pre><code class=\"language-none\">├── site.config.js\n├── lib\n|   ├── utils\n|       ├── logger.js\n|       └── utils.js\n|   ├── build.js\n|   └── serve.js\n├── public\n├── src\n|   ├── admin\n|   ├── assets\n|       ├── images\n|           └── articles\n|       ├── js\n|       └── stylesheet\n|   ├── favicon\n|   ├── layouts\n|       └── partials\n|   ├── pages\n|   ├── posts\n|   ├── _headers file\n|   ├── _redirects file\n|   ├── google517a67c0c3ff6768.html\n|   ├── sitemap.xml\n├── node_modules\n├── netlify.toml\n├── Procfile\n├── package.json\n└── .gitignore \n</code></pre>\n<p>Note that there is a <code>watch.js</code> and a <code>build-module.js</code> script in lib folder. Those are experimental.</p>\n<h2>site.config.js</h2>\n<p>This script contains the main properties of the website. These properties are automatically pasted into the EJS partials:</p>\n<pre><code class=\"language-javascript\">module.exports = {\n  site: {\n    url: 'https://static-site-express.netlify.com',\n    title: `static-site-express`,\n    defaultImage: '/assets/images/static.jpg',\n    author: 'András Gulácsi',\n    quote: 'A Node.js-based static site generator that uses EJS and Markdown',\n    description: 'A Node.js-based static site generator that uses EJS and Markdown',\n    currentYear: new Date().getFullYear(),\n    google_analytics: 'YOUR-ID-COMES-HERE',\n    twitter: 'https://twitter.com/andrasgulacsi'\n  }\n}\n</code></pre>\n<h2>What are these folders?</h2>\n<ul>\n<li><code>lib/</code>: contains the build script and the local server;</li>\n<li><code>public/</code>: the site will be generated into this directory</li>\n<li><code>src/</code>: this is the source directory containing all the files from which the site will be generated.\n<ul>\n<li><code>admin/</code>: This is for the Content Management System, contains an <code>index.html</code> and a <code>config.yml</code> configuration file;</li>\n<li><code>assets/</code>: contains all the images (<code>images/</code>, and the images for your posts should go here: <code>images/articles/</code>), stylesheets (<code>stylesheet/</code>), and scripts (<code>scripts/</code>);</li>\n<li><code>favicon/</code>: this have to contain your favicon. For example, <a href=\"https://realfavicongenerator.net/\">Use this online favicon generator</a>;</li>\n<li><code>layouts/</code>: layouts consisting of partials for the home page, about page etc.\n<ul>\n<li><code>layouts/partials</code>: here are the EJS partials like head, header, footer etc.;</li>\n</ul>\n</li>\n<li><code>pages/</code>: main content, pages like index.ejs, writings.ejs;</li>\n<li><code>posts/</code>: the place where you create your blogposts in Markdown format</li>\n</ul>\n</li>\n</ul>\n<h3>Write your blogposts</h3>\n<p>You have to use <code>Markdown</code> format for writing posts. The file consists of a YAML header (metadata for your post) and the actual content, the text of your post in <code>Markdown</code>. See more about Markdown syntax <a href=\"https://static-site-express.netlify.com/2018/06/25/markdown_cheatsheet\">in my previous post</a>.</p>\n<p><strong>Filename format: <code>YYYY-MM-DD-your-title-goes-here.md</code></strong></p>\n<p>You should stick to this format.</p>\n<p>The YAML header (between the two <code>---</code>) looks like this:</p>\n<pre><code class=\"language-raw\">---\ntitle: Welcome to static-site-express. Install guide.\ndate: '2018-06-22'\nexcerpt: &gt;- \n  static-site-express is a simple Node.js based static site generator that uses EJS and Markdown. Installation and usage guide.\ncoverImage: node.jpg\n---\n\nstatic-site-express is a simple Node.js based static-site generator that uses EJS and Markdown. You can deploy your static site to Netlify...\n</code></pre>\n<p>Currrently, only string format is allowed for the <code>date</code> property, so if you need to post more than once a day, it will lead to problems.</p>\n<h2>Use Netlify's Content Management System to write your posts</h2>\n<p>First, you have to enable <a href=\"https://www.netlify.com/docs/identity/\">Netlify Identity</a>. Log in to Netlify. Select your site and click on Identity in the navigation. Click 'Invite users' button and add yourself (your email address). DO NOT accept the invite yet! Add <a href=\"https://www.netlify.com/docs/git-gateway/\">Git Gateway</a> so that you can login with your Github. (No need to remember an additional password.) Now, go to your email and accept the invite, and login with Github to <code>your-website-name.netlify.com/admin</code>.</p>\n<p>At registration preferences on Netlify app, select the 'Invite only' option.</p>\n<p>After logging in to <code>your-website-name.netlify.com/admin</code>, you can create your posts in a graphical user interface. <a href=\"https://www.netlifycms.org/docs/add-to-your-site/\">Netlify CMS documentation</a>.</p>\n<h2>Use Netlify Forms</h2>\n<p>If you want to use forms, enable <a href=\"https://www.netlify.com/docs/form-handling/\">Netlify Forms</a>. For client-side form validation, <a href=\"https://afarkas.github.io/webshim/demos/\">webshims</a> is used.</p>\n<h2>Comments</h2>\n<p>Use third party solutions: <a href=\"https://disqus.com/\">Disqus</a>, or <a href=\"https://developers.facebook.com/docs/plugins/comments/\">Facebook Comments</a>.</p>\n<h2>Tracker code</h2>\n<p>Go to Google Analitics and create your tracker code for your site. You need a tracker id.</p>\n<pre><code class=\"language-javascript\">window.dataLayer = window.dataLayer || [];\nfunction gtag(){dataLayer.push(arguments);}\ngtag('js', new Date());\ngtag('config', 'YOUR-ID-COMES-HERE');\n</code></pre>\n<p>Also add your id to <code>site.config.js</code>.</p>\n<h2>Netlify Docs</h2>\n<ul>\n<li>There is extensive documentation <a href=\"https://www.netlify.com/docs/welcome/\">on Netlify's page</a>. Check it out.</li>\n</ul>\n<p>If you have a problem or a question about static-site-express, <a href=\"https://github.com/SalsaBoy990/static-site-express/issues\">open an issue</a>.</p>\n"},{"objectID":"2021-01-18","url":"https://static-site-express.netlify.app/2021/01/18/vestibulum-ante-neque","lang":"en","title":"Vestibulum ante neque","description":"Vestibulum ante neque, sollicitudin vel ultrices malesuada, euismod eu est. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras metus nibh, ullamcorper id est eget, scelerisque volutpat ante. Nulla facilisi. Praesent ornare orci purus, ut maximus dolor ultrices et.","image":"https://static-site-express.netlify.app/assets/images/uploads/writing.jpg","authors":["András Gulácsi"],"datePublished":"2021-01-18","category":"","content":"<p>Vestibulum ante neque, sollicitudin vel ultrices malesuada, euismod eu est. Interdum et malesuada fames ac ante ipsum primis in faucibus. Cras metus nibh, ullamcorper id est eget, scelerisque volutpat ante. Nulla facilisi. Praesent ornare orci purus, ut maximus dolor ultrices et. Aliquam consequat fringilla accumsan. In ut libero libero. Mauris id justo non purus scelerisque iaculis nec vestibulum dui. Vestibulum rutrum nec ipsum nec imperdiet. Vestibulum non ligula orci. Ut sit amet nulla ullamcorper, commodo libero eu, semper felis. Donec eu diam vitae est vehicula tempor vitae vitae libero. Nulla ut enim et lorem congue molestie. Sed tempus purus vitae est interdum eleifend.</p>\n<p>Vestibulum turpis magna, iaculis a facilisis sed, condimentum eget lectus. Cras cursus sit amet dolor non consectetur. Etiam ut odio nibh. Nullam volutpat aliquet sodales. Integer rhoncus, purus et tincidunt auctor, neque magna lobortis quam, non pellentesque lectus elit id lorem. Duis malesuada consequat quam nec interdum. Fusce aliquet convallis pellentesque. Donec velit dui, convallis sit amet sapien eu, aliquam vulputate justo. Maecenas odio quam, varius condimentum erat ac, ultricies eleifend lacus.</p>\n<p>Curabitur maximus mauris in orci efficitur, sit amet faucibus neque maximus. Sed tristique nunc ac diam eleifend lacinia. Nam viverra augue id velit dapibus laoreet. Integer hendrerit facilisis dui, id bibendum orci volutpat sit amet. Aenean varius ullamcorper tempor. Maecenas interdum ante non felis rhoncus ultrices. Duis suscipit vehicula ultrices. Quisque lobortis, arcu sit amet aliquet consequat, elit nisl lacinia nunc, et venenatis massa tortor vitae dui. Nunc sem metus, pulvinar quis enim at, fermentum ultrices nisi. Vivamus finibus ornare erat, at ullamcorper est efficitur eget. Suspendisse pulvinar bibendum elementum. Donec consectetur sit amet libero vitae eleifend. Nullam non mauris sem. Nulla efficitur aliquet elit eu ornare.</p>\n<p>Nullam vitae porttitor nibh. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean lorem tortor, cursus sed felis sit amet, aliquam lobortis sapien. Aliquam pharetra, erat et volutpat maximus, arcu leo ultricies orci, a placerat nunc sapien id arcu. Ut lacinia arcu et mauris placerat, at suscipit ante ullamcorper. Proin nec pellentesque purus. Nunc in hendrerit nulla, eu vestibulum felis. Sed varius in nisi ac convallis. Proin ut venenatis erat. Nulla consectetur, augue non pretium fringilla, nibh mauris congue elit, nec efficitur metus nibh id diam. Donec tincidunt vulputate purus, ac fringilla risus. Phasellus massa arcu, venenatis non ante quis, eleifend posuere urna. Praesent nec sapien et dolor luctus consectetur. Proin sed elementum lorem, sed ullamcorper nunc. Vivamus eget libero id neque auctor varius. Nulla vitae sollicitudin nulla.</p>\n<p>Sed vitae dui vel mi posuere placerat. Phasellus feugiat faucibus viverra. Maecenas dolor ex, tempor sed metus sit amet, congue dictum nibh. Suspendisse iaculis gravida orci et iaculis. Nam ut commodo tortor. Mauris sed egestas elit, et tempus enim. Nam pellentesque consectetur leo, vitae fringilla leo placerat ac. Nulla non pulvinar ex. In ultricies metus arcu, eu ultrices justo ultricies et. Duis in mi in sem dictum eleifend sed vitae sapien. Maecenas volutpat, augue viverra imperdiet rutrum, mauris dolor ultrices augue, eu semper augue orci commodo leo. Ut ullamcorper id nisl id mollis. Proin aliquam purus vel ante condimentum tincidunt. Quisque eu metus eget purus semper dignissim.</p>\n"},{"objectID":"2021-04-14","url":"https://static-site-express.netlify.app/2021/04/14/quisque-nec-congue-orci","lang":"en","title":"Quisque nec congue orci","description":"Quisque nec congue orci, id facilisis ex. Vestibulum sed sapien risus. Vestibulum tempus neque sed nunc volutpat, non pellentesque metus vehicula. Aliquam et velit a odio elementum varius eget sed massa. Sed id dui laoreet, facilisis nisl id, eleifend elit.","image":"https://static-site-express.netlify.app/assets/images/uploads/writing.jpg","authors":["András Gulácsi"],"datePublished":"2021-04-14","category":"","content":"<p>Quisque nec congue orci, id facilisis ex. Vestibulum sed sapien risus. Vestibulum tempus neque sed nunc volutpat, non pellentesque metus vehicula. Aliquam et velit a odio elementum varius eget sed massa. Sed id dui laoreet, facilisis nisl id, eleifend elit. Duis tellus odio, sagittis nec facilisis viverra, ultricies ac mi. Curabitur eget augue leo. Ut vel ullamcorper quam. Sed lectus purus, tincidunt ut finibus iaculis, iaculis in dolor. Maecenas vel dui eget erat consectetur commodo. Morbi accumsan, velit et luctus luctus, diam tellus interdum leo, vitae posuere metus tortor quis lacus. Etiam porttitor vulputate finibus. Duis commodo ultrices lacus a bibendum.</p>\n<p>Aenean tincidunt hendrerit lectus, in vestibulum urna. Quisque volutpat turpis nec libero commodo, quis ultricies mauris mattis. Morbi quis scelerisque ex, eget tincidunt tortor. In et turpis nulla. Fusce ornare aliquam odio, non dapibus elit fringilla sed. Donec ut urna tristique, suscipit purus in, hendrerit massa. Nulla at semper ipsum. Donec ut tortor nec libero congue consequat. Cras maximus sed magna in scelerisque.</p>\n<p>Suspendisse non congue est. Sed risus sem, elementum eu luctus a, lacinia ac eros. Curabitur quis sodales augue. Donec nec porta est. Morbi at justo tortor. Vestibulum malesuada diam a lacus convallis, id accumsan nibh placerat. Fusce purus nibh, egestas ut leo eu, dignissim luctus tortor. Phasellus eget pulvinar leo.</p>\n<p>Duis ex diam, varius a sagittis in, cursus eu augue. Proin suscipit, tellus vel porttitor aliquet, libero libero pharetra dui, nec interdum justo ante ac nulla. Quisque a purus ac augue ornare egestas. In aliquet interdum quam vitae varius. Duis molestie non arcu eu vehicula. Proin sed euismod tortor. Curabitur at quam dui. Fusce consectetur scelerisque metus, ut tincidunt tellus venenatis sed. Nulla facilisi. Donec in metus non odio viverra feugiat. Donec vulputate ex ac justo consectetur, et aliquet lorem pretium.</p>\n<p>In commodo fermentum lobortis. Nunc id luctus mi. Maecenas gravida orci vitae ex aliquam, id tempus ipsum venenatis. Cras varius, orci a facilisis elementum, velit nibh sagittis dui, ut elementum lorem dolor ac velit. Sed venenatis, elit vel pretium scelerisque, magna lacus convallis felis, nec interdum mi nunc sit amet nibh. In laoreet id libero ac pellentesque. Quisque vestibulum, ipsum et blandit aliquam, leo ligula laoreet tortor, sed vestibulum tortor leo at elit. Cras at eros posuere, euismod neque nec, hendrerit nulla. Vestibulum gravida feugiat dapibus. Cras mattis, neque vitae cursus varius, tellus magna cursus felis, nec fringilla dui risus eu libero. Aenean non fermentum sapien.</p>\n"},{"objectID":"2021-04-22","url":"https://static-site-express.netlify.app/2021/04/22/lorem-ipsum-dolor-sit-amet","lang":"en","title":"Lorem ipsum dolor sit amet","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean augue nisl, ultricies eu ex quis, bibendum iaculis neque. Integer blandit magna eget tempus ultricies.","image":"https://static-site-express.netlify.app/assets/images/uploads/node.jpg","authors":["András Gulácsi"],"datePublished":"2021-04-22","category":"","content":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean augue nisl, ultricies eu ex quis, bibendum iaculis neque. Integer blandit magna eget tempus ultricies. Vestibulum maximus turpis nibh, at consequat elit aliquet eu. Morbi convallis mollis ex, quis luctus risus maximus venenatis. Mauris congue euismod sodales. Sed fermentum finibus libero, eu imperdiet nunc vehicula at. Cras vitae ipsum suscipit, consequat leo vel, tristique lectus. Curabitur porta, arcu lobortis eleifend pulvinar, ex magna viverra enim, a pharetra felis leo feugiat erat.</p>\n<p>Aliquam erat volutpat. Mauris non velit libero. Nam nec venenatis erat. Cras in quam tellus. Fusce viverra sed nibh quis tincidunt. Aliquam laoreet erat eros, non pharetra metus suscipit vitae. Pellentesque ultricies mauris purus, et egestas leo luctus sit amet. Sed vulputate tellus eget est rutrum egestas. Duis et pharetra sapien. Ut non velit vitae lorem suscipit facilisis. Aliquam erat volutpat. Proin quis neque vitae neque tristique tincidunt. Mauris suscipit lectus eu metus ullamcorper, et commodo lacus semper.</p>\n<p>Pellentesque eleifend purus ut magna consequat fringilla. Nulla dictum risus sodales sem vehicula dignissim. Maecenas placerat lacus eget sapien malesuada ultrices. Vestibulum in molestie enim. Curabitur mollis elit euismod, lobortis tortor eu, ullamcorper dolor. Nam rutrum tellus ut ipsum convallis, quis sodales arcu consectetur. Nullam ut pulvinar lorem. Nam vel egestas nunc. Praesent sed diam facilisis, faucibus purus nec, vehicula ligula. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n<p>Fusce porttitor maximus nunc non fermentum. Quisque ac scelerisque urna, a luctus lacus. Donec placerat a eros ut rutrum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam viverra semper dui ut aliquet. Praesent tempor molestie orci accumsan condimentum. Quisque placerat pellentesque metus, et aliquam quam. Vivamus sit amet eros nec risus laoreet porttitor sed in orci.</p>\n<p>Maecenas sit amet suscipit lectus. Nulla iaculis pellentesque augue, sed dignissim felis consectetur non. Praesent lobortis vulputate nulla ut condimentum. Donec gravida auctor rhoncus. Sed tincidunt a metus eget elementum. Pellentesque egestas lorem eget risus fringilla, vitae condimentum velit venenatis. Maecenas eget sem gravida, malesuada neque at, faucibus arcu. Quisque ante ex, ornare quis ultricies sit amet, commodo ut quam.</p>\n"}]